"""
EnlightenAI - Combine Tutorial Node

This module contains the CombineTutorialNode class for combining tutorial chapters.
"""

import os
from typing import Any, Dict, List

from enlightenai.nodes.node import Node
from enlightenai.utils.html_viewer import create_html_viewer, open_html_viewer


class CombineTutorialNode(Node):
    """Node for combining tutorial chapters into a complete tutorial."""

    def process(self, context):
        """Combine tutorial chapters into a complete tutorial.

        Args:
            context (dict): The shared context dictionary containing:
                - chapters: List of chapter dictionaries
                - abstractions: List of abstractions
                - relationships: Dictionary of relationships between abstractions
                - repo_url: URL of the repository
                - output_dir: Output directory for the tutorial
                - output_formats: List of output formats
                - verbose: Whether to print verbose output

        Returns:
            None: The context is updated directly with the tutorial information.
        """
        verbose = context.get("verbose", False)
        output_dir = context.get("output_dir", "tutorial_output")
        output_formats = context.get("output_formats", ["markdown"])
        repo_url = context.get("repo_url", "")
        repo_name = repo_url.split("/")[-1] if repo_url else "Repository"

        # Get the chapters
        chapters = context.get("chapters", [])

        if verbose:
            print(f"Combining {len(chapters)} chapters into a tutorial...")

        # Create the index file
        index_path = os.path.join(output_dir, "index.md")

        # Generate the index content
        index_content = self._generate_index(repo_name, chapters)

        # Write the index file
        with open(index_path, "w", encoding="utf-8") as f:
            f.write(index_content)

        if verbose:
            print(f"Created index file: {index_path}")

        # Generate additional output formats
        if "html" in output_formats:
            self._generate_html(context, repo_name, chapters)

        if "pdf" in output_formats:
            self._generate_pdf_ready(context, repo_name, chapters)

        if "github_pages" in output_formats:
            self._generate_github_pages(context, repo_name, chapters)

        # Generate HTML viewer
        if "viewer" in output_formats or "html_viewer" in output_formats:
            self._generate_html_viewer(context, repo_name, chapters)

        # Update the context
        context["tutorial_index"] = index_path

        if verbose:
            print("Tutorial generation complete!")

        return None

    def _generate_index(self, repo_name: str, chapters: List[Dict[str, Any]]) -> str:
        """Generate the index content.

        Args:
            repo_name (str): Name of the repository
            chapters (list): List of chapter dictionaries

        Returns:
            str: The index content
        """
        # Create the table of contents
        toc_items = []
        for chapter in chapters:
            chapter_filename = chapter.get(
                "filename", f"chapter_{chapter['number']:02d}.md"
            )
            toc_items.append(
                f"{chapter['number']}. [{chapter['title']}](chapters/{chapter_filename})"
            )

        toc = "\n".join(toc_items)

        # Create the index content
        index_content = f"""# {repo_name} - Code Walkthrough

## Overview

This tutorial provides a comprehensive walkthrough of the {repo_name} codebase. It explains the key components, their relationships, and how they work together to form the complete system.

## Table of Contents

{toc}

---

*This tutorial was generated by [ü™ÑEnlightenAIüîç](https://github.com/Mathews-Tom/EnlightenAI), an intelligent codebase explainer.*
"""

        return index_content

    def _generate_html(
        self, context: Dict[str, Any], repo_name: str, chapters: List[Dict[str, Any]]
    ) -> None:
        """Generate an HTML version of the tutorial.

        Args:
            context (dict): The shared context dictionary
            repo_name (str): Name of the repository
            chapters (list): List of chapter dictionaries
        """
        verbose = context.get("verbose", False)
        output_dir = context.get("output_dir", "tutorial_output")

        if verbose:
            print("Generating HTML version...")

        # Create the HTML file
        html_path = os.path.join(output_dir, "tutorial.html")

        # Generate the HTML content
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{repo_name} - Code Walkthrough</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2, h3, h4, h5, h6 {{
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }}
        h1 {{
            font-size: 2em;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
        }}
        h2 {{
            font-size: 1.5em;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
        }}
        a {{
            color: #0366d6;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        pre {{
            background-color: #f6f8fa;
            border-radius: 3px;
            padding: 16px;
            overflow: auto;
        }}
        code {{
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            background-color: rgba(27, 31, 35, 0.05);
            border-radius: 3px;
            padding: 0.2em 0.4em;
        }}
        pre code {{
            background-color: transparent;
            padding: 0;
        }}
        blockquote {{
            padding: 0 1em;
            color: #6a737d;
            border-left: 0.25em solid #dfe2e5;
            margin: 0;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 16px;
        }}
        table th, table td {{
            padding: 6px 13px;
            border: 1px solid #dfe2e5;
        }}
        table tr {{
            background-color: #fff;
            border-top: 1px solid #c6cbd1;
        }}
        table tr:nth-child(2n) {{
            background-color: #f6f8fa;
        }}
        img {{
            max-width: 100%;
            box-sizing: content-box;
        }}
        hr {{
            height: 0.25em;
            padding: 0;
            margin: 24px 0;
            background-color: #e1e4e8;
            border: 0;
        }}
        .toc {{
            background-color: #f6f8fa;
            border: 1px solid #dfe2e5;
            border-radius: 3px;
            padding: 16px;
            margin-bottom: 16px;
        }}
        .chapter {{
            margin-bottom: 32px;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 16px;
        }}
        .footer {{
            margin-top: 32px;
            padding-top: 16px;
            border-top: 1px solid #eaecef;
            color: #6a737d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <h1>{repo_name} - Code Walkthrough</h1>
    
    <div class="toc">
        <h2>Table of Contents</h2>
        <ul>
"""

        # Add table of contents
        for chapter in chapters:
            html_content += f'            <li><a href="#chapter-{chapter["number"]}">{chapter["number"]}. {chapter["title"]}</a></li>\n'

        html_content += """        </ul>
    </div>
    
"""

        # Add chapters
        for chapter in chapters:
            html_content += (
                f'    <div id="chapter-{chapter["number"]}" class="chapter">\n'
            )
            html_content += f"        {chapter['content']}\n"
            html_content += "    </div>\n\n"

        html_content += """    <div class="footer">
        <p>This tutorial was generated by <a href="https://github.com/Mathews-Tom/EnlightenAI">ü™ÑEnlightenAIüîç</a>, an intelligent codebase explainer.</p>
    </div>
</body>
</html>"""

        # Write the HTML file
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        if verbose:
            print(f"Created HTML file: {html_path}")

    def _generate_pdf_ready(
        self, context: Dict[str, Any], repo_name: str, chapters: List[Dict[str, Any]]
    ) -> None:
        """Generate a PDF-ready version of the tutorial.

        Args:
            context (dict): The shared context dictionary
            repo_name (str): Name of the repository
            chapters (list): List of chapter dictionaries
        """
        verbose = context.get("verbose", False)
        output_dir = context.get("output_dir", "tutorial_output")

        if verbose:
            print("Generating PDF-ready version...")

        # Create the PDF-ready file
        pdf_path = os.path.join(output_dir, "tutorial_pdf.md")

        # Generate the PDF-ready content
        pdf_content = f"""---
title: "{repo_name} - Code Walkthrough"
author: "Generated by EnlightenAI"
date: "{self._get_current_date()}"
geometry: "margin=1in"
fontsize: 11pt
toc: true
toc-depth: 3
linkcolor: blue
urlcolor: blue
---

# {repo_name} - Code Walkthrough

"""

        # Add chapters
        for chapter in chapters:
            pdf_content += f"{chapter['content']}\n\n"

        pdf_content += """---

*This tutorial was generated by [ü™ÑEnlightenAIüîç](https://github.com/Mathews-Tom/EnlightenAI), an intelligent codebase explainer.*
"""

        # Write the PDF-ready file
        with open(pdf_path, "w", encoding="utf-8") as f:
            f.write(pdf_content)

        if verbose:
            print(f"Created PDF-ready file: {pdf_path}")
            print("To convert to PDF, run: pandoc -s tutorial_pdf.md -o tutorial.pdf")

    def _generate_github_pages(
        self, context: Dict[str, Any], repo_name: str, chapters: List[Dict[str, Any]]
    ) -> None:
        """Generate GitHub Pages configuration for the tutorial.

        Args:
            context (dict): The shared context dictionary
            repo_name (str): Name of the repository
            chapters (list): List of chapter dictionaries
        """
        verbose = context.get("verbose", False)
        output_dir = context.get("output_dir", "tutorial_output")

        if verbose:
            print("Generating GitHub Pages configuration...")

        # Create the _config.yml file
        config_path = os.path.join(output_dir, "_config.yml")

        # Generate the config content
        config_content = f"""remote_theme: pages-themes/cayman@v0.2.0
plugins:
  - jekyll-remote-theme

title: {repo_name} - Code Walkthrough
description: A comprehensive walkthrough of the {repo_name} codebase
show_downloads: false

github:
  is_project_page: true
  repository_url: {context.get("repo_url", "")}
"""

        # Write the config file
        with open(config_path, "w", encoding="utf-8") as f:
            f.write(config_content)

        if verbose:
            print(f"Created GitHub Pages configuration: {config_path}")

    def _generate_html_viewer(
        self, context: Dict[str, Any], repo_name: str, chapters: List[Dict[str, Any]]
    ) -> None:
        """Generate an HTML viewer for the tutorial.

        Args:
            context (dict): The shared context dictionary
            repo_name (str): Name of the repository
            chapters (list): List of chapter dictionaries
        """
        verbose = context.get("verbose", False)
        output_dir = context.get("output_dir", "tutorial_output")

        if verbose:
            print("Generating HTML viewer...")

        # Get diagrams if available
        diagrams = {}
        diagrams_dir = os.path.join(output_dir, "diagrams")
        if os.path.exists(diagrams_dir):
            for filename in os.listdir(diagrams_dir):
                if filename.endswith(".md"):
                    diagram_type = filename.replace(".md", "")
                    diagram_path = os.path.join(diagrams_dir, filename)
                    with open(diagram_path, "r", encoding="utf-8") as f:
                        diagrams[diagram_type] = f.read()

        # Create the HTML viewer
        html_path = create_html_viewer(
            output_dir, f"{repo_name} - Code Walkthrough", chapters, diagrams
        )

        if verbose:
            print(f"Created HTML viewer: {html_path}")
            print("To view the tutorial, open the HTML file in a web browser.")

        # Open the HTML viewer if requested
        if context.get("open_viewer", False):
            open_html_viewer(html_path)

    def _get_current_date(self) -> str:
        """Get the current date in YYYY-MM-DD format.

        Returns:
            str: The current date
        """
        from datetime import datetime

        return datetime.now().strftime("%Y-%m-%d")
