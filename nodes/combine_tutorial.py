"""
EnlightenAI - Combine Tutorial Node

This module contains the CombineTutorialNode class, which is responsible for
combining all chapters into a complete tutorial and generating an index file.
"""

import os
import json
from nodes import Node
from utils.call_llm import call_llm
from utils.formatting import create_mermaid_diagram, create_table_of_contents


class CombineTutorialNode(Node):
    """Node for combining all chapters into a complete tutorial."""
    
    def process(self, context):
        """Combine all chapters into a complete tutorial and generate an index file.
        
        Args:
            context (dict): The shared context dictionary containing:
                - repo_url: The GitHub repository URL
                - abstractions: List of abstraction dictionaries
                - relationships: List of relationship dictionaries
                - chapters: List of chapter dictionaries
                - output_dir: Output directory for the tutorial
                - llm_provider: The LLM provider to use
                - api_key: API key for the LLM provider
                - verbose: Whether to print verbose output
                
        Returns:
            None: The context is updated directly.
        """
        repo_url = context["repo_url"]
        abstractions = context["abstractions"]
        relationships = context["relationships"]
        chapters = context["chapters"]
        output_dir = context["output_dir"]
        verbose = context.get("verbose", False)
        
        if verbose:
            print("Combining chapters into a complete tutorial")
        
        # Create the index file content
        index_content = self._create_index_content(repo_url, abstractions, relationships, chapters, context)
        
        # Save the index file
        index_path = os.path.join(output_dir, "index.md")
        with open(index_path, "w") as f:
            f.write(index_content)
        
        if verbose:
            print(f"Saved index file to {index_path}")
        
        # Return None as we've updated the context directly
        return None
    
    def _create_index_content(self, repo_url, abstractions, relationships, chapters, context):
        """Create the content for the index file.
        
        Args:
            repo_url (str): The GitHub repository URL
            abstractions (list): List of abstraction dictionaries
            relationships (list): List of relationship dictionaries
            chapters (list): List of chapter dictionaries
            context (dict): The shared context dictionary
            
        Returns:
            str: The content for the index file
        """
        # Extract the repository name from the URL
        repo_name = repo_url.rstrip("/").split("/")[-1]
        
        # Create the LLM prompt for the overview
        prompt = f"""
        You are an expert code educator. Your task is to write a concise overview of the '{repo_name}' codebase.
        
        Write a brief Markdown overview (about 3-5 paragraphs) that explains:
        1. What the project does
        2. Its main features and capabilities
        3. The overall architecture and design philosophy
        
        Here is information about the key components in the codebase:
        
        """
        
        # Add abstraction details to the prompt
        prompt += json.dumps(abstractions, indent=2)
        
        # Call the LLM to generate the overview
        overview = call_llm(
            prompt=prompt,
            provider=context.get("llm_provider", "openai"),
            api_key=context.get("api_key"),
            max_tokens=1000,
            temperature=0.5
        )
        
        # Create the Mermaid diagram
        diagram = create_mermaid_diagram(abstractions, relationships)
        
        # Create the table of contents
        toc = create_table_of_contents(chapters)
        
        # Combine everything into the index content
        index_content = f"""# {repo_name} - Code Walkthrough

## Overview

{overview}

## System Architecture

The following diagram shows the key components and their relationships:

{diagram}

{toc}

---

*This tutorial was generated by [EnlightenAI](https://github.com/Mathews-Tom/EnlightenAI), an intelligent codebase explainer.*
"""
        
        return index_content
